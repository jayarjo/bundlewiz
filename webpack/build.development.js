const chalk = require('chalk')
const clearConsole = require('react-dev-utils/clearConsole')
const createDevServerConfig = require('./webpack.devserver.config')
const fs = require('fs')
const openBrowser = require('react-dev-utils/openBrowser')
const path = require('path')
const webpack = require('webpack')
const WebpackDevServer = require('webpack-dev-server')
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls
} = require('react-dev-utils/WebpackDevServerUtils')
const { getPaths, getDotenv } = require('../utils')

module.exports = config => {
  const { MONOREPO_ROOT, PACKAGE_ROOT, PUBLIC_PATH } = getPaths()
  const ENV = getDotenv('development')
  const PACKAGE = require(`${PACKAGE_ROOT}/package.json`)
  // Tools like Cloud9 rely on this.
  const DEFAULT_PORT = parseInt(ENV.PORT || process.env.PORT, 10) || 3000
  const HOST = ENV.HOST || process.env.HOST || '0.0.0.0'
  const useYarn = fs.existsSync(path.resolve(MONOREPO_ROOT, 'yarn.lock'))
  const isInteractive = process.stdout.isTTY

  if (process.env.HOST) {
    console.log(
      chalk.cyan(
        `Attempting to bind to HOST environment variable: ${chalk.yellow(
          chalk.bold(process.env.HOST)
        )}`
      )
    )
    console.log(
      `If this was unintentional, check that you haven't mistakenly set it in your shell.`
    )
    console.log(`Learn more here: ${chalk.yellow('http://bit.ly/2mwWSwH')}`)
    console.log()
  }

  // We attempt to use the default port but if it is busy, we offer the user to
  // run on a different port. `choosePort()` Promise resolves to the next free port.
  return choosePort(HOST, DEFAULT_PORT)
    .then(port => {
      if (port == null) {
        // We have not found a port.
        return
      }
      const protocol = process.env.HTTPS === 'true' ? 'https' : 'http'
      const appName = PACKAGE.name
      const urls = prepareUrls(protocol, HOST, port)
      // Create a webpack compiler that is configured with custom messages.
      const compiler = createCompiler(webpack, config, appName, urls, useYarn)
      // Load proxy config
      const proxySetting = PACKAGE.proxy
      const proxyConfig = prepareProxy(proxySetting, PUBLIC_PATH)
      // Serve webpack assets generated by the compiler over a web sever.
      const serverConfig = createDevServerConfig(
        proxyConfig,
        urls.lanUrlForConfig
      )
      const devServer = new WebpackDevServer(compiler, serverConfig)
      // Launch WebpackDevServer.
      devServer.listen(port, HOST, err => {
        if (err) {
          return console.log(err)
        }
        if (isInteractive) {
          clearConsole()
        }
        console.log(chalk.cyan('Starting the development server...\n'))
        // openBrowser(urls.localUrlForBrowser);
      })
      ;['SIGINT', 'SIGTERM'].forEach(function (sig) {
        process.on(sig, function () {
          devServer.close()
          process.exit()
        })
      })
    })
    .catch(err => {
      if (err && err.message) {
        console.log(err.message)
      }
      process.exit(1)
    })
}
